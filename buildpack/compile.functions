# This file is part of heroku. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT. No part of heroku, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT.


core_usesIn heroku configure
heroku_buildpack_compile_initialise()
{
	heroku_configure_initialise
}

heroku_buildpack_compile_actionMessageAndNotes()
{
	local actionMessage="$1"
	shift 1
	printf '%s %s\n' '----->' "$actionMessage"
	
	if [ $# -ne 0 ]; then
		heroku_buildpack_compile_notesMessages "$@"
	fi
}

heroku_buildpack_compile_notesMessages()
{
	local noteMessage
	for noteMessage in "$@"
	do
		printf '       %s\n' "$noteMessage"
	done
}

heroku_buildpack_compile_guardStack()
{
	# The only environment variables (ie in 'env') we can rely on are STACK and SOURCE_VERSION
	heroku_buildpack_compile_actionMessageAndNotes "Validating environment variable STACK"
	
	if ! heroku_configure_validateStack "$STACK"; then
		core_exitError $core_commandLine_exitCode_CONFIG "Environment variable 'STACK' has unsupported value '$STACK'"
	fi
}

core_dependency_requires '*' mkdir
heroku_buildpack_compile_createCacheDirIfNotPresent()
{
	heroku_buildpack_compile_actionMessageAndNotes "Creating cache directory '$heroku_buildpack_cacheDir' if not present"
	
	mkdir -m 0755 -p "$heroku_buildpack_cacheDir"
	pushd "$heroku_buildpack_cacheDir"
		heroku_buildpack_cacheDir="$(pwd)"
	popd
}

# Sadly, this approach will 'lose' any trailing line feeds
heroku_buildpack_compile_getConfigurationVariableValue()
{
	local configurationVariableName="$1"
	
	heroku_buildpack_compile_notesMessages "Getting environment variable '$configurationVariableName'"
	
	local variableToSetName=heroku_configurationVariable_${configurationVariableName}
	local configurationVariableFilePath="$heroku_buildpack_envDir"/"$configurationVariableName"
	
	if [ ! -f "$configurationVariableFilePath" ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "There is no environment variable '$configurationVariableName' at '$configurationVariableFilePath'"
	fi
	core_variable_setVariable "$variableToSetName" "$(<"$configurationVariableFilePath")"
}

heroku_buildpack_compile_sourceKnownCompileConfigurationVariables()
{
	heroku_buildpack_compile_actionMessageAndNotes "Sourcing known configuration variables"
}

core_dependency_requires '*' rsync
heroku_buildpack_compile_deployHerokuBuildpackArtifacts()
{
	heroku_buildpack_compile_actionMessageAndNotes "Deploying Heroku Buildpack Artifacts to BUILD_DIR '$heroku_buildpack_buildDir'"
	
	rsync -a "$heroku_buildpack_buildDir"/"$heroku_configurationFolderName"/"$heroku_buildpacksConfigurationFolderName"/ "$heroku_buildpack_buildDir"/
}

heroku_buildpack_compile_sourceCompileExtensions()
{
	core_message WARN "Source Compile extensions"
}

heroku_buildpack_compile_delegateToMultiBuildpack()
{
	heroku_buildpack_compile_actionMessageAndNotes "Delegating to 'heroku-buildpack-multi'"
	
	set -x
	
	cd "$heroku_buildpack_buildDir"/lib/heroku 1>/dev/null 2>/dev/null
	
		exec bin/compile "$heroku_buildpack_buildDir" "$heroku_buildpack_cacheDir" "$heroku_buildpack_envDir"
	
	cd -
}
