# This file is part of shellfire heroku. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/heroku/master/COPYRIGHT. No part of shellfire heroku, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of shellfire heroku. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/heroku/master/COPYRIGHT.


core_usesIn heroku configure
heroku_buildpack_compile_initialise()
{
	heroku_configure_initialise
	heroku_buildpack_initialise
}

heroku_buildpack_compile_actionMessageAndNotes()
{
	local actionMessage="$1"
	shift 1
	printf '%s %s\n' '----->' "$actionMessage"
	
	if [ $# -ne 0 ]; then
		heroku_buildpack_compile_notesMessages "$@"
	fi
}

heroku_buildpack_compile_notesMessages()
{
	local noteMessage
	for noteMessage in "$@"
	do
		printf '       %s\n' "$noteMessage"
	done
}

heroku_buildpack_compile_guardStack()
{
	# The only environment variables (ie in 'env') we can rely on are STACK and SOURCE_VERSION
	heroku_buildpack_compile_actionMessageAndNotes "Validating environment variable STACK"
	
	if ! heroku_configure_validateStack "$STACK"; then
		core_exitError $core_commandLine_exitCode_CONFIG "Environment variable 'STACK' has unsupported value '$STACK'"
	fi
}

core_dependency_requires '*' mkdir
heroku_buildpack_compile_createCacheDirIfNotPresent()
{
	heroku_buildpack_compile_actionMessageAndNotes "Creating cache directory '$heroku_buildpack_cacheDir' if not present"
	
	mkdir -m 0755 -p "$heroku_buildpack_cacheDir"
	pushd "$heroku_buildpack_cacheDir"
		heroku_buildpack_cacheDir="$(pwd)"
	popd
}

core_dependency_requires '*' mkdir
heroku_buildpack_compile_createOurPrivateCacheDirIfNotPresent()
{	
	heroku_buildpack_compile_actionMessageAndNotes "Creating our private cache directory '$heroku_buildpack_cacheDir' if not present"
	
	heroku_buildpack_ourPrivateCacheDir="$heroku_buildpack_cacheDir"/"$heroku_frameworkName"
	mkdir -m 0755 -p "$heroku_buildpack_ourPrivateCacheDir"
}

# Sadly, this approach will 'lose' any trailing line feeds
heroku_buildpack_compile_getConfigurationVariableValue()
{
	local configurationVariableName="$1"
	
	heroku_buildpack_compile_notesMessages "Getting environment variable '$configurationVariableName'"
	
	local variableToSetName=heroku_configurationVariable_${configurationVariableName}
	local configurationVariableFilePath="$heroku_buildpack_envDir"/"$configurationVariableName"
	
	if [ ! -f "$configurationVariableFilePath" ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "There is no environment variable '$configurationVariableName' at '$configurationVariableFilePath'"
	fi
	core_variable_setVariable "$variableToSetName" "$(<"$configurationVariableFilePath")"
}

heroku_buildpack_compile_sourceKnownCompileConfigurationVariables()
{
	heroku_buildpack_compile_actionMessageAndNotes "Sourcing known configuration variables"
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_installOrUpdateLinuxbrewInCacheForBuildDependencies()
{
	heroku_buildpack_compile_linuxbrew_installOrUpdate 'build'
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_removeNoLongerUsedLinuxbrewBuildDependencies()
{
	heroku_buildpack_compile_linuxbrew_removeNoLongerUsedDependencies 'build'
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_installLinuxbrewBuildDependencies()
{
	heroku_buildpack_compile_linuxbrew_installDependencies 'build'
}

core_dependency_requires '*' rm ln
heroku_buildpack_compile_installBuildRootOntoPath()
{
	local buildRootFolderPath="$heroku_compile_configurationFolderPath"/"$heroku_rootBuildDependenciesFileName"
	if ! core_path_isReadableAndSearchableFolderPath "$buildRootFolderPath"; then
		return 0
	fi
	
	local rootFolderPath="$heroku_buildpack_ourPrivateCacheDir"/.root
	rm -rf "$rootFolderPath"
	ln -s "$buildRootFolderPath" "$rootFolderPath"
	
	if ! core_path_isReadableAndSearchableFolderPath "$rootFolderPath"/bin; then
		heroku_buildpack_setRootPathVariable PATH bin "$rootFolderPath"/bin
	fi
	
	if ! core_path_isReadableAndSearchableFolderPath "$rootFolderPath"/man; then
		heroku_buildpack_setRootPathVariable MANPATH man "$rootFolderPath"/man
	fi

	if ! core_path_isReadableAndSearchableFolderPath "$rootFolderPath"/info; then
		heroku_buildpack_setRootPathVariable INFOPATH info "$rootFolderPath"/info
	fi

	if ! core_path_isReadableAndSearchableFolderPath "$rootFolderPath"/lib; then
		heroku_buildpack_setRootPathVariable LD_LIBRARY_PATH lib "$rootFolderPath"/lib
	fi
}

core_dependency_requires '*' mkdir rsync
heroku_buildpack_compile_installProfileDScripts()
{
	local destinationProfileDFolderPath="$heroku_buildpack_buildDir"/.profile.d
	mkdir -m 0755 -p "$destinationProfileDFolderPath"
	
	local runProfileDScripts="$heroku_compile_configurationFolderPath"/"$heroku_rootRunProfileDFolderName"
	
	if ! core_path_isReadableAndSearchableFolderPath "$runProfileDScripts"; then
		return 0
	fi
	
	rsync --quiet -a "$runProfileDScripts"/ "$destinationProfileDFolderPath"/
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_installOrUpdateLinuxbrewInCacheForRunDependencies()
{
	heroku_buildpack_compile_linuxbrew_installOrUpdate 'run'
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_removeNoLongerUsedLinuxbrewRunDependencies()
{
	heroku_buildpack_compile_linuxbrew_removeNoLongerUsedDependencies 'run'
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_installLinuxbrewRunDependencies()
{
	heroku_buildpack_compile_linuxbrew_installDependencies 'run'
}

core_dependency_requires '*' rsync
heroku_buildpack_compile_installRunRootOntoPath()
{
	local runRootFolderPath="$heroku_compile_configurationFolderPath"/"$heroku_rootBuildDependenciesFileName"
	if ! core_path_isReadableAndSearchableFolderPath "$runRootFolderPath"; then

		mkdir -m 0755 -p "$destinationProfileDFolderPath"
		pushd "$destinationProfileDFolderPath"
			mkdir -m 0755 bin info man lib
		popd
		
		return 0
	fi
	
	local rootFolderPath="$(heroku_buildpack_getHome)"/.root
	
	rsync --quiet -a "$runRootFolderPath"/ "$rootFolderPath"/
}

core_usesIn heroku/buildpack compile_linuxbrew
heroku_buildpack_compile_makePackageManagerLinuxbrew()
{
	local action='build'
	local linuxbrewParentFolderPath
	heroku_buildpack_compile_linuxbrew_setPaths
	heroku_buildpack_compile_linuxbrew_setExportedPaths
	
	core_dependency_packageManager=Homebrew
}

heroku_buildpack_compile_sourceCompileExtensions()
{
	heroku_buildpack_compile_actionMessageAndNotes "Sourcing Compile extensions"
	
	local extensionsFolderPath="$heroku_compile_configurationFolderPath"/"$heroku_extensionsConfigurationFolderName"
	if ! core_path_isReadableAndSearchableFolderPath "$extensionsFolderPath"; then
		heroku_buildpack_compile_notesMessages "There are no extensions"
		return 0
	fi
	
	pushd "$extensionsFolderPath"
		
		local compileExtensionFile
		set +f
		for compileExtensionFile in *.compile.sh
		do
			set -f
			
			heroku_buildpack_compile_notesMessages "Sourcing compile extension '$compileExtensionFile'"
			
			# ./ required for source to work in some shells
			. ./"$compileExtensionFile"
		done
		set -f
	
	popd
}

core_dependency_requires '*' chmod
heroku_buildpack_compile_delegateToOtherBuildpacks()
{
	heroku_buildpack_compile_actionMessageAndNotes "Delegating to other buildpacks"
	
	_heroku_buildpack_compile_delegateToOtherBuildpacks_callback()
	{
		heroku_buildpack_compile_actionMessageAndNotes "Compiling buildpack '$buildpackFolderName'"
		
		heroku_buildpack_sourceFrameworkName true
		
		local compileFilePath="$buildpackBinFolderPath"/compile
		if ! core_path_isReadableNonEmptyFilePath "$compileFilePath"; then
			heroku_buildpack_compile_notesMessages "buildpack '$buildpackFolderName' for framework '$heroku_buildpack_frameworkName' is missing 'compile'"
			return 0
		fi
		
		if ! core_path_isReadableNonEmptyExecutableFilePath "$compileFilePath"; then
			heroku_buildpack_compile_notesMessages "buildpack '$buildpackFolderName' for framework '$heroku_buildpack_frameworkName' has 'compile' without execute bit set; continuing, but you should fix this"
			chmod +x "$compileFilePath"
		fi

		heroku_buildpack_compile_notesMessages "Running 'compile' for buildpack '$buildpackFolderName' for framework '$heroku_buildpack_frameworkName'"
		set +e
		"$compileFilePath" "$heroku_buildpack_buildDir" "$heroku_buildpack_cacheDir" "$heroku_buildpack_envDir"
		local exitCode=$?
		set -e
		
		if [ $exitCode -ne 0 ]; then
			heroku_buildpack_compile_notesMessages "Run of 'compile' for buildpack '$buildpackFolderName' for framework '$heroku_buildpack_frameworkName' failed with exit code '$exitCode'"
			exit $core_commandLine_exitCode_FAILURE
		fi
		heroku_buildpack_compile_notesMessages "Running 'compile' for buildpack '$buildpackFolderName' for framework '$heroku_buildpack_frameworkName' succeeded"
		
		heroku_buildpack_sourceEnvironment true
	}
	
	heroku_buildpack_iterateOverBuildpacksToDelegateTo _heroku_buildpack_compile_delegateToOtherBuildpacks_callback
}
