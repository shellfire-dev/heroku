# This file is part of heroku. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT. No part of heroku, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT.


core_dependency_requires '*' heroku tail head cut
heroku_configure_initialise()
{
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	heroku_configure_regionsFilePath="$TMP_FILE"
	
	if core_compatibility_whichNoOutput heroku; then
		heroku regions | tail -n +2 | head -n +2 | cut -d' ' -f1 >"$heroku_configure_regionsFilePath"
	else
		core_message DEBUG "Validation of regions is not possible as the heroku toolbelt 'heroku' is missing"
	fi
}

core_dependency_requires '*' grep
configure_validate_region()
{
	local configurationSettingValue="$1"
	
	if core_variable_isUnset heroku_configure_regionsFilePath; then
		heroku_configure_initialise
	fi
	
	if grep -q '^'"$configurationSettingValue"'$' "$heroku_configure_regionsFilePath"; then
		return 0
	fi
	
	core_message WARN "The configuration setting '$configurationSettingName' ('$configurationSettingValue') is not a valid 'region'."
}

core_snippet_embed raw validate_stack
configure_validate_stack()
{
	local configurationSettingValue="$1"
	
	case "$configurationSettingValue" in
		
		cedar|cedar-14)
			:
		;;
		
		*)
			core_message WARN "The configuration setting '$configurationSettingName' ('$configurationSettingValue') is not a valid 'stack'."
		;;
		
	esac
}

heroku_configure_validateStack()
{
	local configurationSettingValue="$1"
	local configurationSettingName='(irrelevant)'
	
	configure_validate_stack "$configurationSettingValue"
	
	local warning="$(configure_validate_stack "$configurationSettingValue" 2>&1)"
	if [ -n "$warning" ]; then
		return 1
	else
		return 0
	fi
}

core_usesIn configure
heroku_configure_register()
{
	local potentialAppName="$(core_compatibility_basename "$heroku_repositoryPath")"
	if [ -z "$potentialAppName" ]; then
		configure_register Value NotEmpty heroku appName
	else
		configure_register Value NotEmpty heroku appName "$potentialAppName"
	fi
	
	configure_register Value region heroku region 'eu'
	configure_register Value NotEmpty heroku remote 'heroku'
	configure_register Value stack heroku stack 'cedar-14'
	configure_register Value NotEmpty heroku refspec 'master'
}

core_usesIn configure
heroku_configure_load()
{
	configure_reset heroku
	configure_source "$heroku_configurationFolderPath" heroku
	configure_validate heroku
	
	heroku_appName="$(configure_getValue heroku appName)"
	heroku_region="$(configure_getValue heroku region)"
	heroku_remote="$(configure_getValue heroku remote)"
	heroku_stack="$(configure_getValue heroku stack)"
	heroku_refspec="$(configure_getValue heroku refspec)"
}
