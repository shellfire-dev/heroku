# This file is part of heroku. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT. No part of heroku, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT.


heroku_toolbelt_initialise()
{
	local TMP_FILE
	
	core_temporaryFiles_newFileToRemoveOnExit
	_heroku_toolbelt_standardOutputFilePath="$TMP_FILE"
	
	core_temporaryFiles_newFileToRemoveOnExit
	_heroku_toolbelt_standardErrorFilePath="$TMP_FILE"
}

core_dependency_requires '*' heroku
heroku_toolbelt_inRepository()
{
	local exitOnError="$1"
	local printStandardOut="$2"
	shift 2
	
	pushd "$heroku_repositoryPath"
		
		set +e
		heroku "$@" 1>"$_heroku_toolbelt_standardOutputFilePath" 2>"$_heroku_toolbelt_standardErrorFilePath"
		local exitCode=$?
		set -e
		
	popd
	
	local warningLevel
	if [ $exitCode -ne 0 ]; then
		warningLevel=WARN
	else
		warningLevel=INFO
	fi
	
	if $printStandardOut; then
		_heroku_toolbelt_inRepository_printLinesIfAny "$warningLevel" 'stdout' "$_heroku_toolbelt_standardOutputFilePath"
	fi
	_heroku_toolbelt_inRepository_printLinesIfAny "$warningLevel" 'stderr' "$_heroku_toolbelt_standardErrorFilePath"
	
	if [ $exitCode -ne 0 ]; then
		if $exitOnError; then
			core_exitError $core_commandLine_exitCode_SOFTWARE "heroku '$@' failed with exit code '$exitCode'"
		fi
	fi
}

_heroku_toolbelt_inRepository_printLine()
{
	local message
	if $afterFirst; then
		message="> $line"
	else
		message="$line"
	fi
	core_message "$warningLevel" "heroku: $fileDescriptor: $message"
}

_heroku_toolbelt_inRepository_printLinesIfAny()
{
	local warningLevel="$1"
	local fileDescriptor="$2"
	local linesFilePath="$3"
	
	if [ ! -s "$linesFilePath" ]; then
		return 0
	fi
	
	local afterFirst=false
	local line
	while IFS= read -r line
	do
		_heroku_toolbelt_inRepository_printLine
		afterFirst=true
	done <"$linesFilePath"
	# Read any final line not terminated by '\n'; too bad
	if [ -n line ]; then
		_heroku_toolbelt_inRepository_printLine
		afterFirst=true
	fi
}
