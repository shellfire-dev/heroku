# This file is part of heroku. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT. No part of heroku, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of heroku. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/heroku/master/COPYRIGHT.


# This function has a side effect of setting heroku_repositoryPath and heroku_configurationFolderPath
core_usesIn git
heroku_validate_repositoryPathAndSetVariable()
{
	local code=$1
	local category="$2"
	local name="$3"
	local value="$4"
	
	core_validate_folderPathReadableAndSearchable "$code" "$category" "$name" "$value"
	
	if ! git_isPathSomewhereInsideGitRepository "$value"; then
		core_validate_exit "The $category '$name' specifies a repository path '$value' which is not within a git repository"
	fi
	
	local repositoryPath="$(git_findAbsolutePathOfTopLevelOfRepository "$value")"
	if [ -z "$repositoryPath" ]; then
		core_validate_exit "The $category '$name' specifies a repository path '$value' which has not got a readable '.git' folder in its parent paths"
	fi

	local notEmptyIfLocalModifications="$(git_localModificationHashOrEmptyString "$heroku_repositoryPath")"
	if [ -n "$notEmptyIfLocalModifications" ]; then
		core_validate_exit "The $category '$name' specifies a repository path '$value' which has pending local modifications to the git repository at '$repositoryPath'"
	fi
	
	heroku_repositoryPath="$repositoryPath"
	
	local configurationParentFolderPath="$(heroku_validate_findHerokuConfigurationParentFolderPath "$value")"
	if [ -z "$configurationParentFolderPath" ]; then
		core_validate_exit "The $category '$name' specifies a repository path '$value' which has not got a readable '$heroku_configurationFolderName' folder in its parent paths"
	fi
	
	heroku_configurationFolderPath="$configurationParentFolderPath"/"$heroku_configurationFolderName"
}

# If in a submodule, walks up the directory hierarchy to the '.git' folder
# If no repository found, returns ''
heroku_validate_findHerokuConfigurationParentFolderPath()
{
	pushd "$1"
		local currentFolderPath="$(pwd)"
	popd
		
	while [ ! core_path_isReadableAndSearchableFolderPath "$currentFolderPath"/"$heroku_configurationFolderName" ]; then
	do
		if [ "$currentFolderPath" = '/' ]; then
			printf ''
			return 0
		fi
		
		pushd "$currentFolderPath"/..
			currentFolderPath="$(pwd)"
		popd
	done
	
	printf '%s' "$currentFolderPath"
}

heroku_validate_parseBuildDir()
{
	local buildDir="$1"
	
	core_validate_folderPathReadableAndSearchableAndWritable $core_commandLine_exitCode_USAGE 'option' 'BUILD_DIR' "$buildDir"	
	pushd "$buildDir"
		heroku_buildpack_buildDir="$(pwd)"
	popd
}

heroku_validate_buildDirCommandLineParse()
{
	if [ $# -ne 1 ]; then
		core_commandLine_exitBadCommandLine "Please specify only one argument, BUILD_DIR, not $# arguments"
	fi
	
	heroku_validate_parseBuildDir "$1"
}
